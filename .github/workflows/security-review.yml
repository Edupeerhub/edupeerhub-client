name: "Bi-weekly Security Review"

on:
  schedule:
    - cron: "0 8 1,15 * *"  # 08:00 UTC on the 1st and 15th
  workflow_dispatch: {}

jobs:
  summarize:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: read
      issues: write

    steps:
      - uses: actions/checkout@v4

      - name: Summarize Security Alerts
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const title = "🔐 Bi-weekly Security & Dependency Alerts Review";

            // Find existing tracking issue with label security-review
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: repo.owner,
              repo: repo.repo,
              state: 'open',
              labels: 'security-review'
            });
            let issue = issues.find(i => i.title === title);

            const safeReq = async (route, params) => {
              try { return await github.request(route, params); }
              catch { return { data: [] }; }
            };

            const dependabot = await safeReq('GET /repos/{owner}/{repo}/dependabot/alerts', {
              owner: repo.owner,
              repo: repo.repo,
              per_page: 100,
              state: 'open'
            });

            const codeScan = await safeReq('GET /repos/{owner}/{repo}/code-scanning/alerts', {
              owner: repo.owner,
              repo: repo.repo,
              per_page: 100,
              state: 'open'
            });

            const secretScan = await safeReq('GET /repos/{owner}/{repo}/secret-scanning/alerts', {
              owner: repo.owner,
              repo: repo.repo,
              per_page: 100,
              state: 'open'
            });

            const fmt = (arr, map) => arr.length ? arr.map(map).join('\n') : "_None_";

            const depList = fmt(dependabot.data, a =>
              `- [#${a.number}] ${a.security_advisory?.summary || a.dependency?.package?.name} (${a.state}) • Severity: **${a.security_severity_level?.toUpperCase?.() || 'n/a'}**`
            );

            const codeList = fmt(codeScan.data, a =>
              `- [#${a.number}] ${a.rule?.description || a.rule?.id} (${a.state}) • Severity: **${a.rule?.security_severity_level?.toUpperCase?.() || 'n/a'}**`
            );

            const secretList = fmt(secretScan.data, a =>
              `- [#${a.number}] Secret type: **${a.secret_type_display_name || a.secret_type}** • Location: ${a.location?.path || 'n/a'} • State: ${a.state}`
            );

            const body = `
**Run:** ${new Date().toISOString()}

### ✅ Summary
- Open Dependabot alerts: **${dependabot.data.length}**
- Open Code Scanning alerts: **${codeScan.data.length}**
- Open Secret Scanning alerts: **${secretScan.data.length}**

### 📦 Dependabot
${depList}

### 🧠 Code Scanning
${codeList}

### 🔑 Secret Scanning
${secretList}

> Triage highest severity first; assign owners and add due dates.
`;

            if (!issue) {
              await github.rest.issues.create({
                owner: repo.owner,
                repo: repo.repo,
                title,
                body,
                labels: ['security-review']
              });
            } else {
              await github.rest.issues.update({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue.number,
                body
              });
            }
